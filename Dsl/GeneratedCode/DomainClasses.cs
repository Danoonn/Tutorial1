//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainClass World
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.World.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.World.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("52d93a6e-3851-496f-874d-850262193724")]
	public partial class World : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// World domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x52d93a6e, 0x3851, 0x496f, 0x87, 0x4d, 0x85, 0x02, 0x62, 0x19, 0x37, 0x24);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public World(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public World(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Country> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(global::Company.Tutorial1.WorldHasCountries.WorldDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Tutorial1.Country.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Tutorial1.Country sourceCountry1 = sourceElement as global::Company.Tutorial1.Country;
			if (sourceCountry1 != null)
			{
				// Create link for path WorldHasCountries.Elements
				this.Elements.Add(sourceCountry1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Tutorial1.Country sourceCountry1 = sourceElement as global::Company.Tutorial1.Country;
			if (sourceCountry1 != null)
			{
				// Delete link for path WorldHasCountries.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.Tutorial1.WorldHasCountries.GetLinks((global::Company.Tutorial1.World)this, sourceCountry1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Tutorial1.WorldHasCountries.WorldDomainRoleId, global::Company.Tutorial1.WorldHasCountries.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainClass Country
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.Country.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.Country.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("1b5962b9-3941-4809-bf0a-fe91c843b475")]
	public partial class Country : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Country domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b5962b9, 0x3941, 0x4809, 0xbf, 0x0a, 0xfe, 0x91, 0xc8, 0x43, 0xb4, 0x75);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Country(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Country(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x99a2d3f8, 0xa2c2, 0x4857, 0x80, 0x69, 0x12, 0xa8, 0x60, 0xa6, 0x5b, 0xc7);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Tutorial1.Country.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.Country/Name.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.Country/Name.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("99a2d3f8-a2c2-4857-8069-12a860a65bc7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Country.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Country, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Country.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Country.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Country element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Country element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Flag domain property code
		
		/// <summary>
		/// Flag domain property Id.
		/// </summary>
		public static readonly global::System.Guid FlagDomainPropertyId = new global::System.Guid(0x750a22bf, 0xc668, 0x4d19, 0x89, 0x05, 0x27, 0x00, 0xe1, 0x06, 0xef, 0xe2);
		
		/// <summary>
		/// Storage for Flag
		/// </summary>
		private global::System.String flagPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Flag domain property.
		/// Description for Company.Tutorial1.Country.Flag
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.Country/Flag.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.Country/Flag.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("750a22bf-c668-4d19-8905-2700e106efe2")]
		public global::System.String Flag
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return flagPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FlagPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Country.Flag domain property.
		/// </summary>
		internal sealed partial class FlagPropertyHandler : DslModeling::DomainPropertyValueHandler<Country, global::System.String>
		{
			private FlagPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Country.Flag domain property value handler.
			/// </summary>
			public static readonly FlagPropertyHandler Instance = new FlagPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Country.Flag domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FlagDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Country element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.flagPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Country element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.flagPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region World opposite domain role accessor
		/// <summary>
		/// Gets or sets World.
		/// </summary>
		public virtual World World
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Tutorial1.WorldHasCountries.ElementDomainRoleId) as World;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Tutorial1.WorldHasCountries.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.Tutorial1.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Country> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(global::Company.Tutorial1.CountryReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.Tutorial1.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Country> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(global::Company.Tutorial1.CountryReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region City opposite domain role accessor
		
		/// <summary>
		/// Gets a list of City.
		/// Description for Company.Tutorial1.CountryHasCity.Country
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<City> City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(global::Company.Tutorial1.CountryHasCity.CountryDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Tutorial1.City.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Tutorial1.City sourceCity1 = sourceElement as global::Company.Tutorial1.City;
			if (sourceCity1 != null)
			{
				// Create link for path CountryHasCity.City
				this.City.Add(sourceCity1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Tutorial1.City sourceCity1 = sourceElement as global::Company.Tutorial1.City;
			if (sourceCity1 != null)
			{
				// Delete link for path CountryHasCity.City
				
				foreach (DslModeling::ElementLink link in global::Company.Tutorial1.CountryHasCity.GetLinks((global::Company.Tutorial1.Country)this, sourceCity1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Tutorial1.CountryHasCity.CountryDomainRoleId, global::Company.Tutorial1.CountryHasCity.CityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainClass City
	/// Description for Company.Tutorial1.City
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.City.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.City.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("707276c5-ac10-49ab-926a-a2121aa177ad")]
	public partial class City : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// City domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x707276c5, 0xac10, 0x49ab, 0x92, 0x6a, 0xa2, 0x12, 0x1a, 0xa1, 0x77, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public City(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public City(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5f4aca3f, 0xf553, 0x44e1, 0xac, 0x25, 0xf4, 0x60, 0x24, 0xb4, 0xea, 0xaa);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Tutorial1.City.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.City/Name.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.City/Name.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5f4aca3f-f553-44e1-ac25-f46024b4eaaa")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the City.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<City, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the City.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the City.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(City element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(City element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Population domain property code
		
		/// <summary>
		/// Population domain property Id.
		/// </summary>
		public static readonly global::System.Guid PopulationDomainPropertyId = new global::System.Guid(0x1198aca0, 0x184d, 0x45ce, 0xb8, 0x5a, 0x6b, 0x46, 0x64, 0x4d, 0x3c, 0x2e);
		
		/// <summary>
		/// Storage for Population
		/// </summary>
		private global::System.UInt32 populationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Population domain property.
		/// Description for Company.Tutorial1.City.Population
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.City/Population.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.City/Population.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1198aca0-184d-45ce-b85a-6b46644d3c2e")]
		public global::System.UInt32 Population
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return populationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PopulationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the City.Population domain property.
		/// </summary>
		internal sealed partial class PopulationPropertyHandler : DslModeling::DomainPropertyValueHandler<City, global::System.UInt32>
		{
			private PopulationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the City.Population domain property value handler.
			/// </summary>
			public static readonly PopulationPropertyHandler Instance = new PopulationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the City.Population domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PopulationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.UInt32 GetValue(City element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.populationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(City element, global::System.UInt32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.UInt32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.populationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Location domain property code
		
		/// <summary>
		/// Location domain property Id.
		/// </summary>
		public static readonly global::System.Guid LocationDomainPropertyId = new global::System.Guid(0xd6663c53, 0xa524, 0x4222, 0x89, 0xed, 0x78, 0x21, 0x50, 0x4c, 0xfc, 0x2a);
		
		/// <summary>
		/// Storage for Location
		/// </summary>
		private global::System.String locationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Location domain property.
		/// Description for Company.Tutorial1.City.Location
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.City/Location.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.City/Location.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d6663c53-a524-4222-89ed-7821504cfc2a")]
		public global::System.String Location
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return locationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the City.Location domain property.
		/// </summary>
		internal sealed partial class LocationPropertyHandler : DslModeling::DomainPropertyValueHandler<City, global::System.String>
		{
			private LocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the City.Location domain property value handler.
			/// </summary>
			public static readonly LocationPropertyHandler Instance = new LocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the City.Location domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(City element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.locationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(City element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.locationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Country opposite domain role accessor
		/// <summary>
		/// Gets or sets Country.
		/// Description for Company.Tutorial1.CountryHasCity.City
		/// </summary>
		public virtual Country Country
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Tutorial1.CountryHasCity.CityDomainRoleId) as Country;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Tutorial1.CountryHasCity.CityDomainRoleId, value);
			}
		}
		#endregion
		#region Person opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Person.
		/// Description for Company.Tutorial1.CityHasPerson.City
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Person
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.Tutorial1.CityHasPerson.CityDomainRoleId);
			}
		}
		#endregion
		#region TargetCity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetCity.
		/// Description for Company.Tutorial1.CityReferencesTargetCity.SourceCity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<City> TargetCity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(global::Company.Tutorial1.CityReferencesTargetCity.SourceCityDomainRoleId);
			}
		}
		#endregion
		#region SourceCity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceCity.
		/// Description for Company.Tutorial1.CityReferencesTargetCity.TargetCity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<City> SourceCity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(global::Company.Tutorial1.CityReferencesTargetCity.TargetCityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.Tutorial1.Person.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.Tutorial1.Person sourcePerson1 = sourceElement as global::Company.Tutorial1.Person;
			if (sourcePerson1 != null)
			{
				// Create link for path CityHasPerson.Person
				this.Person.Add(sourcePerson1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.Tutorial1.Person sourcePerson1 = sourceElement as global::Company.Tutorial1.Person;
			if (sourcePerson1 != null)
			{
				// Delete link for path CityHasPerson.Person
				
				foreach (DslModeling::ElementLink link in global::Company.Tutorial1.CityHasPerson.GetLinks((global::Company.Tutorial1.City)this, sourcePerson1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.Tutorial1.CityHasPerson.CityDomainRoleId, global::Company.Tutorial1.CityHasPerson.PersonDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainClass Person
	/// Description for Company.Tutorial1.Person
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.Person.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.Person.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6a3a0f3a-0b1b-4ac9-ab4e-adcecaaa135d")]
	public partial class Person : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Person domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6a3a0f3a, 0x0b1b, 0x4ac9, 0xab, 0x4e, 0xad, 0xce, 0xca, 0xaa, 0x13, 0x5d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xfe275c6f, 0x3bc8, 0x41aa, 0x8b, 0x23, 0xb6, 0xe8, 0xb0, 0x8c, 0x15, 0x07);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.Tutorial1.Person.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.Person/Name.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.Person/Name.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fe275c6f-3bc8-41aa-8b23-b6e8b08c1507")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Gender domain property code
		
		/// <summary>
		/// Gender domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenderDomainPropertyId = new global::System.Guid(0x038857b6, 0xe306, 0x4113, 0x82, 0x8b, 0xac, 0xa1, 0x06, 0x93, 0x62, 0x34);
		
		/// <summary>
		/// Storage for Gender
		/// </summary>
		private global::System.String genderPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Gender domain property.
		/// Description for Company.Tutorial1.Person.Gender
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.Person/Gender.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.Person/Gender.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("038857b6-e306-4113-828b-aca106936234")]
		public global::System.String Gender
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return genderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Gender domain property.
		/// </summary>
		internal sealed partial class GenderPropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.String>
		{
			private GenderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Gender domain property value handler.
			/// </summary>
			public static readonly GenderPropertyHandler Instance = new GenderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Gender domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.genderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.genderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Age domain property code
		
		/// <summary>
		/// Age domain property Id.
		/// </summary>
		public static readonly global::System.Guid AgeDomainPropertyId = new global::System.Guid(0x9b9f6582, 0xbdf3, 0x4239, 0x9b, 0x91, 0xa3, 0xdd, 0x25, 0x1c, 0x2b, 0x74);
		
		/// <summary>
		/// Storage for Age
		/// </summary>
		private global::System.UInt16 agePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Age domain property.
		/// Description for Company.Tutorial1.Person.Age
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.Person/Age.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.Person/Age.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9b9f6582-bdf3-4239-9b91-a3dd251c2b74")]
		public global::System.UInt16 Age
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return agePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AgePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Age domain property.
		/// </summary>
		internal sealed partial class AgePropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.UInt16>
		{
			private AgePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Age domain property value handler.
			/// </summary>
			public static readonly AgePropertyHandler Instance = new AgePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Age domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AgeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.UInt16 GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.agePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.UInt16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.UInt16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.agePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region City opposite domain role accessor
		/// <summary>
		/// Gets or sets City.
		/// Description for Company.Tutorial1.CityHasPerson.Person
		/// </summary>
		public virtual City City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.Tutorial1.CityHasPerson.PersonDomainRoleId) as City;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.Tutorial1.CityHasPerson.PersonDomainRoleId, value);
			}
		}
		#endregion
	}
}
