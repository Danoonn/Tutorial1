//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainModel Tutorial1DomainModel
	/// Description for Company.Tutorial1.Tutorial1
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.Tutorial1DomainModel.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.Tutorial1DomainModel.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("b0542dbd-fb5b-4551-bd3c-9cc85f96a49b")]
	public partial class Tutorial1DomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// Tutorial1DomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xb0542dbd, 0xfb5b, 0x4551, 0xbd, 0x3c, 0x9c, 0xc8, 0x5f, 0x96, 0xa4, 0x9b);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public Tutorial1DomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(World),
				typeof(Country),
				typeof(City),
				typeof(Person),
				typeof(WorldHasCountries),
				typeof(CountryReferencesTargets),
				typeof(CountryHasCity),
				typeof(CityHasPerson),
				typeof(CityReferencesTargetCity),
				typeof(Tutorial1Diagram),
				typeof(ExampleConnector),
				typeof(CityConnector),
				typeof(CountryShape),
				typeof(PersonShape),
				typeof(CityShape),
				typeof(global::Company.Tutorial1.FixUpDiagram),
				typeof(global::Company.Tutorial1.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(Country), "Name", Country.NameDomainPropertyId, typeof(Country.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Country), "Flag", Country.FlagDomainPropertyId, typeof(Country.FlagPropertyHandler)),
				new DomainMemberInfo(typeof(City), "Name", City.NameDomainPropertyId, typeof(City.NamePropertyHandler)),
				new DomainMemberInfo(typeof(City), "Population", City.PopulationDomainPropertyId, typeof(City.PopulationPropertyHandler)),
				new DomainMemberInfo(typeof(City), "Location", City.LocationDomainPropertyId, typeof(City.LocationPropertyHandler)),
				new DomainMemberInfo(typeof(Person), "Name", Person.NameDomainPropertyId, typeof(Person.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Person), "Gender", Person.GenderDomainPropertyId, typeof(Person.GenderPropertyHandler)),
				new DomainMemberInfo(typeof(Person), "Age", Person.AgeDomainPropertyId, typeof(Person.AgePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(WorldHasCountries), "World", WorldHasCountries.WorldDomainRoleId),
				new DomainRolePlayerInfo(typeof(WorldHasCountries), "Element", WorldHasCountries.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(CountryReferencesTargets), "Source", CountryReferencesTargets.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(CountryReferencesTargets), "Target", CountryReferencesTargets.TargetDomainRoleId),
				new DomainRolePlayerInfo(typeof(CountryHasCity), "Country", CountryHasCity.CountryDomainRoleId),
				new DomainRolePlayerInfo(typeof(CountryHasCity), "City", CountryHasCity.CityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CityHasPerson), "City", CityHasPerson.CityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CityHasPerson), "Person", CityHasPerson.PersonDomainRoleId),
				new DomainRolePlayerInfo(typeof(CityReferencesTargetCity), "SourceCity", CityReferencesTargetCity.SourceCityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CityReferencesTargetCity), "TargetCity", CityReferencesTargetCity.TargetCityDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(10);
				createElementMap.Add(typeof(World), 0);
				createElementMap.Add(typeof(Country), 1);
				createElementMap.Add(typeof(City), 2);
				createElementMap.Add(typeof(Person), 3);
				createElementMap.Add(typeof(Tutorial1Diagram), 4);
				createElementMap.Add(typeof(ExampleConnector), 5);
				createElementMap.Add(typeof(CityConnector), 6);
				createElementMap.Add(typeof(CountryShape), 7);
				createElementMap.Add(typeof(PersonShape), 8);
				createElementMap.Add(typeof(CityShape), 9);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.Tutorial1.Tutorial1DomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new World(partition, propertyAssignments);
				case 1: return new Country(partition, propertyAssignments);
				case 2: return new City(partition, propertyAssignments);
				case 3: return new Person(partition, propertyAssignments);
				case 4: return new Tutorial1Diagram(partition, propertyAssignments);
				case 5: return new ExampleConnector(partition, propertyAssignments);
				case 6: return new CityConnector(partition, propertyAssignments);
				case 7: return new CountryShape(partition, propertyAssignments);
				case 8: return new PersonShape(partition, propertyAssignments);
				case 9: return new CityShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(5);
				createElementLinkMap.Add(typeof(WorldHasCountries), 0);
				createElementLinkMap.Add(typeof(CountryReferencesTargets), 1);
				createElementLinkMap.Add(typeof(CountryHasCity), 2);
				createElementLinkMap.Add(typeof(CityHasPerson), 3);
				createElementLinkMap.Add(typeof(CityReferencesTargetCity), 4);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Company.Tutorial1.Tutorial1DomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new WorldHasCountries(partition, roleAssignments, propertyAssignments);
				case 1: return new CountryReferencesTargets(partition, roleAssignments, propertyAssignments);
				case 2: return new CountryHasCity(partition, roleAssignments, propertyAssignments);
				case 3: return new CityHasPerson(partition, roleAssignments, propertyAssignments);
				case 4: return new CityReferencesTargetCity(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Company.Tutorial1.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return Tutorial1DomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (Tutorial1DomainModel.resourceManager == null)
				{
					Tutorial1DomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(Tutorial1DomainModel).Assembly);
				}
				return Tutorial1DomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return Tutorial1DomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return Tutorial1DomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (Tutorial1DomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new Tutorial1CopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					Tutorial1DomainModel.copyClosure = copyFilter;
				}
				return Tutorial1DomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (Tutorial1DomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new Tutorial1DeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					Tutorial1DomainModel.removeClosure = removeFilter;
				}
				return Tutorial1DomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Company.Tutorial1.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Company.Tutorial1.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Company.Tutorial1.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Company.Tutorial1.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class Tutorial1DeleteClosure : Tutorial1DeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Tutorial1DeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class Tutorial1DeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public Tutorial1DeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Company.Tutorial1.WorldHasCountries.ElementDomainRoleId, true);
			DomainRoles.Add(global::Company.Tutorial1.CountryHasCity.CityDomainRoleId, true);
			DomainRoles.Add(global::Company.Tutorial1.CityHasPerson.PersonDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class Tutorial1CopyClosure : Tutorial1CopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Tutorial1CopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class Tutorial1CopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Tutorial1CopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

