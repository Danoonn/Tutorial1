//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainRelationship WorldHasCountries
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.WorldHasCountries.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.WorldHasCountries.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9f70f966-5dfc-4e67-ac58-624fffbdd367")]
	public partial class WorldHasCountries : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// WorldHasCountries domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9f70f966, 0x5dfc, 0x4e67, 0xac, 0x58, 0x62, 0x4f, 0xff, 0xbd, 0xd3, 0x67);
	
				
		/// <summary>
		/// Constructor
		/// Creates a WorldHasCountries link in the same Partition as the given World
		/// </summary>
		/// <param name="source">World to use as the source of the relationship.</param>
		/// <param name="target">Country to use as the target of the relationship.</param>
		public WorldHasCountries(World source, Country target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(WorldHasCountries.WorldDomainRoleId, source), new DslModeling::RoleAssignment(WorldHasCountries.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WorldHasCountries(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WorldHasCountries(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WorldHasCountries(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WorldHasCountries(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region World domain role code
		
		/// <summary>
		/// World domain role Id.
		/// </summary>
		public static readonly global::System.Guid WorldDomainRoleId = new global::System.Guid(0x7d908918, 0x12bb, 0x4d98, 0x80, 0x06, 0xdb, 0xdb, 0xf8, 0xdf, 0x96, 0xd5);
		
		/// <summary>
		/// DomainRole World
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.WorldHasCountries/World.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.WorldHasCountries/World.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.Tutorial1.WorldHasCountries/World.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7d908918-12bb-4d98-8006-dbdbf8df96d5")]
		public virtual World World
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (World)DslModeling::DomainRoleInfo.GetRolePlayer(this, WorldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WorldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access World of a Country
		/// <summary>
		/// Gets World.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static World GetWorld(Country element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as World;
		}
		
		/// <summary>
		/// Sets World.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetWorld(Country element, World newWorld)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newWorld);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x3f65266e, 0x6484, 0x4a37, 0x89, 0xb1, 0x13, 0x71, 0x0b, 0xc2, 0x9c, 0x83);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.WorldHasCountries/Element.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.WorldHasCountries/Element.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "World", PropertyDisplayNameKey="Company.Tutorial1.WorldHasCountries/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3f65266e-6484-4a37-89b1-13710bc29c83")]
		public virtual Country Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a World
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Country> GetElements(World element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(element, WorldDomainRoleId);
		}
		#endregion
		#region World link accessor
		/// <summary>
		/// Get the list of WorldHasCountries links to a World.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.WorldHasCountries> GetLinksToElements ( global::Company.Tutorial1.World worldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.WorldHasCountries>(worldInstance, global::Company.Tutorial1.WorldHasCountries.WorldDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the WorldHasCountries link to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.WorldHasCountries GetLinkToWorld (global::Company.Tutorial1.Country elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.WorldHasCountries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.WorldHasCountries>(elementInstance, global::Company.Tutorial1.WorldHasCountries.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region WorldHasCountries instance accessors
		
		/// <summary>
		/// Get any WorldHasCountries links between a given World and a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.WorldHasCountries> GetLinks( global::Company.Tutorial1.World source, global::Company.Tutorial1.Country target )
		{
			global::System.Collections.Generic.List<global::Company.Tutorial1.WorldHasCountries> outLinks = new global::System.Collections.Generic.List<global::Company.Tutorial1.WorldHasCountries>();
			global::System.Collections.Generic.IList<global::Company.Tutorial1.WorldHasCountries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.WorldHasCountries>(source, global::Company.Tutorial1.WorldHasCountries.WorldDomainRoleId);
			foreach ( global::Company.Tutorial1.WorldHasCountries link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one WorldHasCountries link between a given Worldand a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.WorldHasCountries GetLink( global::Company.Tutorial1.World source, global::Company.Tutorial1.Country target )
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.WorldHasCountries> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.WorldHasCountries>(source, global::Company.Tutorial1.WorldHasCountries.WorldDomainRoleId);
			foreach ( global::Company.Tutorial1.WorldHasCountries link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainRelationship CountryReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.CountryReferencesTargets.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.CountryReferencesTargets.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0353c5f2-5fd6-4ccd-885e-b77f13073530")]
	public partial class CountryReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CountryReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0353c5f2, 0x5fd6, 0x4ccd, 0x88, 0x5e, 0xb7, 0x7f, 0x13, 0x07, 0x35, 0x30);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CountryReferencesTargets link in the same Partition as the given Country
		/// </summary>
		/// <param name="source">Country to use as the source of the relationship.</param>
		/// <param name="target">Country to use as the target of the relationship.</param>
		public CountryReferencesTargets(Country source, Country target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CountryReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(CountryReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xd0659b1c, 0xff09, 0x4176, 0xb1, 0x50, 0x42, 0x3e, 0x1f, 0xa9, 0xa0, 0x19);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.Tutorial1.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CountryReferencesTargets/Source.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CountryReferencesTargets/Source.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.Tutorial1.CountryReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d0659b1c-ff09-4176-b150-423e1fa9a019")]
		public virtual Country Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Country
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Country> GetSources(Country element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xb049ab94, 0x90fd, 0x4945, 0xbe, 0x6d, 0x45, 0x3c, 0xd1, 0xc5, 0x86, 0x0a);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.Tutorial1.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CountryReferencesTargets/Target.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CountryReferencesTargets/Target.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.Tutorial1.CountryReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b049ab94-90fd-4945-be6d-453cd1c5860a")]
		public virtual Country Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Country
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Country> GetTargets(Country element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Country>, Country>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of CountryReferencesTargets links to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CountryReferencesTargets> GetLinksToTargets ( global::Company.Tutorial1.Country sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryReferencesTargets>(sourceInstance, global::Company.Tutorial1.CountryReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of CountryReferencesTargets links to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CountryReferencesTargets> GetLinksToSources ( global::Company.Tutorial1.Country targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryReferencesTargets>(targetInstance, global::Company.Tutorial1.CountryReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region CountryReferencesTargets instance accessors
		
		/// <summary>
		/// Get any CountryReferencesTargets links between a given Country and a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CountryReferencesTargets> GetLinks( global::Company.Tutorial1.Country source, global::Company.Tutorial1.Country target )
		{
			global::System.Collections.Generic.List<global::Company.Tutorial1.CountryReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.Tutorial1.CountryReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CountryReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryReferencesTargets>(source, global::Company.Tutorial1.CountryReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Tutorial1.CountryReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CountryReferencesTargets link between a given Countryand a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.CountryReferencesTargets GetLink( global::Company.Tutorial1.Country source, global::Company.Tutorial1.Country target )
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CountryReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryReferencesTargets>(source, global::Company.Tutorial1.CountryReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.Tutorial1.CountryReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainRelationship CountryHasCity
	/// Description for Company.Tutorial1.CountryHasCity
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.CountryHasCity.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.CountryHasCity.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0cb6021a-96d9-4f0b-a312-209e9d43b938")]
	public partial class CountryHasCity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CountryHasCity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0cb6021a, 0x96d9, 0x4f0b, 0xa3, 0x12, 0x20, 0x9e, 0x9d, 0x43, 0xb9, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CountryHasCity link in the same Partition as the given Country
		/// </summary>
		/// <param name="source">Country to use as the source of the relationship.</param>
		/// <param name="target">City to use as the target of the relationship.</param>
		public CountryHasCity(Country source, City target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CountryHasCity.CountryDomainRoleId, source), new DslModeling::RoleAssignment(CountryHasCity.CityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryHasCity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryHasCity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CountryHasCity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CountryHasCity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Country domain role code
		
		/// <summary>
		/// Country domain role Id.
		/// </summary>
		public static readonly global::System.Guid CountryDomainRoleId = new global::System.Guid(0x3f8ad707, 0xb24c, 0x4d03, 0xa7, 0x63, 0x59, 0xf0, 0x4e, 0x85, 0xaf, 0x45);
		
		/// <summary>
		/// DomainRole Country
		/// Description for Company.Tutorial1.CountryHasCity.Country
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CountryHasCity/Country.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CountryHasCity/Country.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "City", PropertyDisplayNameKey="Company.Tutorial1.CountryHasCity/Country.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3f8ad707-b24c-4d03-a763-59f04e85af45")]
		public virtual Country Country
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Country)DslModeling::DomainRoleInfo.GetRolePlayer(this, CountryDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CountryDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Country of a City
		/// <summary>
		/// Gets Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Country GetCountry(City element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CityDomainRoleId) as Country;
		}
		
		/// <summary>
		/// Sets Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCountry(City element, Country newCountry)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CityDomainRoleId, newCountry);
		}
		#endregion
		#region City domain role code
		
		/// <summary>
		/// City domain role Id.
		/// </summary>
		public static readonly global::System.Guid CityDomainRoleId = new global::System.Guid(0xf35c5289, 0x41b5, 0x4c30, 0xac, 0xd7, 0xc1, 0x1e, 0xaa, 0x0a, 0x18, 0x0b);
		
		/// <summary>
		/// DomainRole City
		/// Description for Company.Tutorial1.CountryHasCity.City
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CountryHasCity/City.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CountryHasCity/City.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Country", PropertyDisplayNameKey="Company.Tutorial1.CountryHasCity/City.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f35c5289-41b5-4c30-acd7-c11eaa0a180b")]
		public virtual City City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, CityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access City of a Country
		/// <summary>
		/// Gets a list of City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<City> GetCity(Country element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(element, CountryDomainRoleId);
		}
		#endregion
		#region Country link accessor
		/// <summary>
		/// Get the list of CountryHasCity links to a Country.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CountryHasCity> GetLinksToCity ( global::Company.Tutorial1.Country countryInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryHasCity>(countryInstance, global::Company.Tutorial1.CountryHasCity.CountryDomainRoleId);
		}
		#endregion
		#region City link accessor
		/// <summary>
		/// Get the CountryHasCity link to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.CountryHasCity GetLinkToCountry (global::Company.Tutorial1.City cityInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CountryHasCity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryHasCity>(cityInstance, global::Company.Tutorial1.CountryHasCity.CityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of City not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CountryHasCity instance accessors
		
		/// <summary>
		/// Get any CountryHasCity links between a given Country and a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CountryHasCity> GetLinks( global::Company.Tutorial1.Country source, global::Company.Tutorial1.City target )
		{
			global::System.Collections.Generic.List<global::Company.Tutorial1.CountryHasCity> outLinks = new global::System.Collections.Generic.List<global::Company.Tutorial1.CountryHasCity>();
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CountryHasCity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryHasCity>(source, global::Company.Tutorial1.CountryHasCity.CountryDomainRoleId);
			foreach ( global::Company.Tutorial1.CountryHasCity link in links )
			{
				if ( target.Equals(link.City) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CountryHasCity link between a given Countryand a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.CountryHasCity GetLink( global::Company.Tutorial1.Country source, global::Company.Tutorial1.City target )
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CountryHasCity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CountryHasCity>(source, global::Company.Tutorial1.CountryHasCity.CountryDomainRoleId);
			foreach ( global::Company.Tutorial1.CountryHasCity link in links )
			{
				if ( target.Equals(link.City) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainRelationship CityHasPerson
	/// Description for Company.Tutorial1.CityHasPerson
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.CityHasPerson.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.CityHasPerson.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("972271f8-6371-4455-9033-b95f73ed9d7a")]
	public partial class CityHasPerson : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CityHasPerson domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x972271f8, 0x6371, 0x4455, 0x90, 0x33, 0xb9, 0x5f, 0x73, 0xed, 0x9d, 0x7a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CityHasPerson link in the same Partition as the given City
		/// </summary>
		/// <param name="source">City to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public CityHasPerson(City source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CityHasPerson.CityDomainRoleId, source), new DslModeling::RoleAssignment(CityHasPerson.PersonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityHasPerson(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityHasPerson(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityHasPerson(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityHasPerson(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region City domain role code
		
		/// <summary>
		/// City domain role Id.
		/// </summary>
		public static readonly global::System.Guid CityDomainRoleId = new global::System.Guid(0x7cc367d7, 0x5109, 0x41f4, 0xae, 0x71, 0x4d, 0xf8, 0x17, 0x4a, 0xc0, 0x57);
		
		/// <summary>
		/// DomainRole City
		/// Description for Company.Tutorial1.CityHasPerson.City
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CityHasPerson/City.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CityHasPerson/City.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Person", PropertyDisplayNameKey="Company.Tutorial1.CityHasPerson/City.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7cc367d7-5109-41f4-ae71-4df8174ac057")]
		public virtual City City
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, CityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access City of a Person
		/// <summary>
		/// Gets City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static City GetCity(Person element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PersonDomainRoleId) as City;
		}
		
		/// <summary>
		/// Sets City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCity(Person element, City newCity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PersonDomainRoleId, newCity);
		}
		#endregion
		#region Person domain role code
		
		/// <summary>
		/// Person domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersonDomainRoleId = new global::System.Guid(0x1de596ec, 0x93b9, 0x4c0d, 0x95, 0x78, 0xb6, 0xd1, 0x60, 0xa2, 0x98, 0xb2);
		
		/// <summary>
		/// DomainRole Person
		/// Description for Company.Tutorial1.CityHasPerson.Person
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CityHasPerson/Person.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CityHasPerson/Person.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "City", PropertyDisplayNameKey="Company.Tutorial1.CityHasPerson/Person.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1de596ec-93b9-4c0d-9578-b6d160a298b2")]
		public virtual Person Person
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Person of a City
		/// <summary>
		/// Gets a list of Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetPerson(City element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, CityDomainRoleId);
		}
		#endregion
		#region City link accessor
		/// <summary>
		/// Get the list of CityHasPerson links to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CityHasPerson> GetLinksToPerson ( global::Company.Tutorial1.City cityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityHasPerson>(cityInstance, global::Company.Tutorial1.CityHasPerson.CityDomainRoleId);
		}
		#endregion
		#region Person link accessor
		/// <summary>
		/// Get the CityHasPerson link to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.CityHasPerson GetLinkToCity (global::Company.Tutorial1.Person personInstance)
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CityHasPerson> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityHasPerson>(personInstance, global::Company.Tutorial1.CityHasPerson.PersonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Person not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CityHasPerson instance accessors
		
		/// <summary>
		/// Get any CityHasPerson links between a given City and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CityHasPerson> GetLinks( global::Company.Tutorial1.City source, global::Company.Tutorial1.Person target )
		{
			global::System.Collections.Generic.List<global::Company.Tutorial1.CityHasPerson> outLinks = new global::System.Collections.Generic.List<global::Company.Tutorial1.CityHasPerson>();
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CityHasPerson> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityHasPerson>(source, global::Company.Tutorial1.CityHasPerson.CityDomainRoleId);
			foreach ( global::Company.Tutorial1.CityHasPerson link in links )
			{
				if ( target.Equals(link.Person) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CityHasPerson link between a given Cityand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.CityHasPerson GetLink( global::Company.Tutorial1.City source, global::Company.Tutorial1.Person target )
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CityHasPerson> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityHasPerson>(source, global::Company.Tutorial1.CityHasPerson.CityDomainRoleId);
			foreach ( global::Company.Tutorial1.CityHasPerson link in links )
			{
				if ( target.Equals(link.Person) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.Tutorial1
{
	/// <summary>
	/// DomainRelationship CityReferencesTargetCity
	/// Description for Company.Tutorial1.CityReferencesTargetCity
	/// </summary>
	[DslDesign::DisplayNameResource("Company.Tutorial1.CityReferencesTargetCity.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.Tutorial1.CityReferencesTargetCity.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.Tutorial1.Tutorial1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e2cbd5ef-a3b8-4aa8-b8b4-b4519375f56b")]
	public partial class CityReferencesTargetCity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CityReferencesTargetCity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2cbd5ef, 0xa3b8, 0x4aa8, 0xb8, 0xb4, 0xb4, 0x51, 0x93, 0x75, 0xf5, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CityReferencesTargetCity link in the same Partition as the given City
		/// </summary>
		/// <param name="source">City to use as the source of the relationship.</param>
		/// <param name="target">City to use as the target of the relationship.</param>
		public CityReferencesTargetCity(City source, City target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CityReferencesTargetCity.SourceCityDomainRoleId, source), new DslModeling::RoleAssignment(CityReferencesTargetCity.TargetCityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityReferencesTargetCity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityReferencesTargetCity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CityReferencesTargetCity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CityReferencesTargetCity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceCity domain role code
		
		/// <summary>
		/// SourceCity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceCityDomainRoleId = new global::System.Guid(0x3c63e2fb, 0xe4c7, 0x4c15, 0x82, 0x2d, 0x51, 0xcd, 0xcb, 0x24, 0x3d, 0xa0);
		
		/// <summary>
		/// DomainRole SourceCity
		/// Description for Company.Tutorial1.CityReferencesTargetCity.SourceCity
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CityReferencesTargetCity/SourceCity.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CityReferencesTargetCity/SourceCity.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetCity", PropertyDisplayNameKey="Company.Tutorial1.CityReferencesTargetCity/SourceCity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3c63e2fb-e4c7-4c15-822d-51cdcb243da0")]
		public virtual City SourceCity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceCityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceCityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceCity of a City
		/// <summary>
		/// Gets a list of SourceCity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<City> GetSourceCity(City element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(element, TargetCityDomainRoleId);
		}
		#endregion
		#region TargetCity domain role code
		
		/// <summary>
		/// TargetCity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetCityDomainRoleId = new global::System.Guid(0x08a411c5, 0xf4b3, 0x4aee, 0x9c, 0xa6, 0xe4, 0x36, 0x20, 0xa6, 0xfe, 0x0f);
		
		/// <summary>
		/// DomainRole TargetCity
		/// Description for Company.Tutorial1.CityReferencesTargetCity.TargetCity
		/// </summary>
		[DslDesign::DisplayNameResource("Company.Tutorial1.CityReferencesTargetCity/TargetCity.DisplayName", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.Tutorial1.CityReferencesTargetCity/TargetCity.Description", typeof(global::Company.Tutorial1.Tutorial1DomainModel), "Company.Tutorial1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceCity", PropertyDisplayNameKey="Company.Tutorial1.CityReferencesTargetCity/TargetCity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("08a411c5-f4b3-4aee-9ca6-e43620a6fe0f")]
		public virtual City TargetCity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (City)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetCityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetCityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetCity of a City
		/// <summary>
		/// Gets a list of TargetCity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<City> GetTargetCity(City element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<City>, City>(element, SourceCityDomainRoleId);
		}
		#endregion
		#region SourceCity link accessor
		/// <summary>
		/// Get the list of CityReferencesTargetCity links to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CityReferencesTargetCity> GetLinksToTargetCity ( global::Company.Tutorial1.City sourceCityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityReferencesTargetCity>(sourceCityInstance, global::Company.Tutorial1.CityReferencesTargetCity.SourceCityDomainRoleId);
		}
		#endregion
		#region TargetCity link accessor
		/// <summary>
		/// Get the list of CityReferencesTargetCity links to a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CityReferencesTargetCity> GetLinksToSourceCity ( global::Company.Tutorial1.City targetCityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityReferencesTargetCity>(targetCityInstance, global::Company.Tutorial1.CityReferencesTargetCity.TargetCityDomainRoleId);
		}
		#endregion
		#region CityReferencesTargetCity instance accessors
		
		/// <summary>
		/// Get any CityReferencesTargetCity links between a given City and a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.Tutorial1.CityReferencesTargetCity> GetLinks( global::Company.Tutorial1.City source, global::Company.Tutorial1.City target )
		{
			global::System.Collections.Generic.List<global::Company.Tutorial1.CityReferencesTargetCity> outLinks = new global::System.Collections.Generic.List<global::Company.Tutorial1.CityReferencesTargetCity>();
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CityReferencesTargetCity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityReferencesTargetCity>(source, global::Company.Tutorial1.CityReferencesTargetCity.SourceCityDomainRoleId);
			foreach ( global::Company.Tutorial1.CityReferencesTargetCity link in links )
			{
				if ( target.Equals(link.TargetCity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CityReferencesTargetCity link between a given Cityand a City.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.Tutorial1.CityReferencesTargetCity GetLink( global::Company.Tutorial1.City source, global::Company.Tutorial1.City target )
		{
			global::System.Collections.Generic.IList<global::Company.Tutorial1.CityReferencesTargetCity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.Tutorial1.CityReferencesTargetCity>(source, global::Company.Tutorial1.CityReferencesTargetCity.SourceCityDomainRoleId);
			foreach ( global::Company.Tutorial1.CityReferencesTargetCity link in links )
			{
				if ( target.Equals(link.TargetCity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
